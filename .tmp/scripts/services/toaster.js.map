{"version":3,"names":[],"mappings":"","sources":["services/toaster.js"],"sourcesContent":["(function () {\r\n'use strict';\r\n\r\n/*\r\n * AngularJS Toaster\r\n * Version: 0.4.9\r\n *\r\n * Copyright 2013 Jiri Kavulak.\r\n * All Rights Reserved.\r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\r\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Author: Jiri Kavulak\r\n * Related to project of John Papa and Hans FjÃ¤llemark\r\n */\r\n\r\nangular.module('toaster', ['ngAnimate'])\r\n.service('toaster', ['$rootScope', function ($rootScope) {\r\n    this.pop = function (type, title, body, timeout, bodyOutputType, clickHandler) {\r\n        if (angular.isObject(type)) {\r\n            var params = type; // NOTE: anable parameters as pop argument\r\n            this.toast = {\r\n                type: params.type,\r\n                title: params.title,\r\n                body: params.body,\r\n                timeout: params.timeout,\r\n                bodyOutputType: params.bodyOutputType,\r\n                clickHandler: params.clickHandler\r\n            };\r\n        }\r\n        else {\r\n            this.toast = {\r\n                type: type,\r\n                title: title,\r\n                body: body,\r\n                timeout: timeout,\r\n                bodyOutputType: bodyOutputType,\r\n                clickHandler: clickHandler\r\n            };\r\n        }\r\n        $rootScope.$emit('toaster-newToast');\r\n    };\r\n\r\n    this.clear = function () {\r\n        $rootScope.$emit('toaster-clearToasts');\r\n    };\r\n}])\r\n.constant('toasterConfig', {\r\n    'limit': 0,                   // limits max number of toasts\r\n    'tap-to-dismiss': true,\r\n    'close-button': false,\r\n    'newest-on-top': true,\r\n    //'fade-in': 1000,            // done in css\r\n    //'on-fade-in': undefined,    // not implemented\r\n    //'fade-out': 1000,           // done in css\r\n    // 'on-fade-out': undefined,  // not implemented\r\n    //'extended-time-out': 1000,    // not implemented\r\n    'time-out': 3000, // Set timeOut and extendedTimeout to 0 to make it sticky\r\n    'icon-classes': {\r\n        error: 'toast-error',\r\n        info: 'toast-info',\r\n        wait: 'toast-wait',\r\n        success: 'toast-success',\r\n        warning: 'toast-warning'\r\n    },\r\n    'body-output-type': '', // Options: '', 'trustedHtml', 'template'\r\n    'body-template': 'toasterBodyTmpl.html',\r\n    'icon-class': 'toast-info',\r\n    'position-class': 'toast-bottom-center',\r\n    'title-class': 'toast-title',\r\n    'message-class': 'toast-message'\r\n})\r\n.directive('toasterContainer', ['$compile', '$rootScope', '$interval', '$sce', 'toasterConfig', 'toaster',\r\nfunction ($compile, $rootScope, $interval, $sce, toasterConfig, toaster) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'EA',\r\n        scope: true, // creates an internal scope for this directive\r\n        link: function (scope, elm, attrs) {\r\n\r\n            var id = 0,\r\n                mergedConfig;\r\n\r\n            mergedConfig = angular.extend({}, toasterConfig, scope.$eval(attrs.toasterOptions));\r\n\r\n            scope.config = {\r\n                position: mergedConfig['position-class'],\r\n                title: mergedConfig['title-class'],\r\n                message: mergedConfig['message-class'],\r\n                tap: mergedConfig['tap-to-dismiss'],\r\n                closeButton: mergedConfig['close-button'],\r\n                animation: mergedConfig['animation-class']\r\n            };\r\n\r\n            scope.configureTimer = function configureTimer(toast) {\r\n                var timeout = typeof (toast.timeout) == \"number\" ? toast.timeout : mergedConfig['time-out'];\r\n                if (timeout > 0)\r\n                    setTimeout(toast, timeout);\r\n            };\r\n\r\n            function addToast(toast) {\r\n                toast.type = mergedConfig['icon-classes'][toast.type];\r\n                if (!toast.type)\r\n                    toast.type = mergedConfig['icon-class'];\r\n\r\n                id++;\r\n                angular.extend(toast, { id: id });\r\n\r\n                // Set the toast.bodyOutputType to the default if it isn't set\r\n                toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type'];\r\n                switch (toast.bodyOutputType) {\r\n                    case 'trustedHtml':\r\n                        toast.html = $sce.trustAsHtml(toast.body);\r\n                        break;\r\n                    case 'template':\r\n                        toast.bodyTemplate = toast.body || mergedConfig['body-template'];\r\n                        break;\r\n                }\r\n\r\n                scope.configureTimer(toast);\r\n\r\n                if (mergedConfig['newest-on-top'] === true) {\r\n                    scope.toasters.unshift(toast);\r\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\r\n                        scope.toasters.pop();\r\n                    }\r\n                } else {\r\n                    scope.toasters.push(toast);\r\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\r\n                        scope.toasters.shift();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setTimeout(toast, time) {\r\n                toast.timeout = $interval(function () {\r\n                    scope.removeToast(toast.id);\r\n                }, time);\r\n            }\r\n\r\n            scope.toasters = [];\r\n            $rootScope.$on('toaster-newToast', function () {\r\n                addToast(toaster.toast);\r\n            });\r\n\r\n            $rootScope.$on('toaster-clearToasts', function () {\r\n                scope.toasters.splice(0, scope.toasters.length);\r\n            });\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n\r\n            $scope.stopTimer = function (toast) {\r\n                if (toast.timeout) {\r\n                    $interval.cancel(toast.timeout);\r\n                    toast.timeout = null;\r\n                }\r\n            };\r\n\r\n            $scope.restartTimer = function (toast) {\r\n                if (!toast.timeout)\r\n                    $scope.configureTimer(toast);\r\n            };\r\n\r\n            $scope.removeToast = function (id) {\r\n                var i = 0;\r\n                for (i; i < $scope.toasters.length; i++) {\r\n                    if ($scope.toasters[i].id === id)\r\n                        break;\r\n                }\r\n                $scope.toasters.splice(i, 1);\r\n            };\r\n\r\n            $scope.click = function (toaster, isCloseButton) {\r\n                if ($scope.config.tap === true) {\r\n                    var removeToast = true;\r\n                    if (toaster.clickHandler) {\r\n                        if (angular.isFunction(toaster.clickHandler)) {\r\n                            removeToast = toaster.clickHandler(toaster, isCloseButton);\r\n                        }\r\n                        else if (angular.isFunction($scope.$parent.$eval(toaster.clickHandler))) {\r\n                            removeToast = $scope.$parent.$eval(toaster.clickHandler)(toaster, isCloseButton);\r\n                        }\r\n                        else {\r\n                            console.log(\"TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.\");\r\n                        }\r\n                    }\r\n                    if (removeToast) {\r\n                        $scope.removeToast(toaster.id);\r\n                    }\r\n                }\r\n            };\r\n        }],\r\n        template:\r\n        '<div  id=\"toast-container\" ng-class=\"[config.position, config.animation]\">' +\r\n            '<div ng-repeat=\"toaster in toasters\" class=\"toast\" ng-class=\"toaster.type\" ng-click=\"click(toaster)\" ng-mouseover=\"stopTimer(toaster)\"  ng-mouseout=\"restartTimer(toaster)\">' +\r\n              '<button class=\"toast-close-button\" ng-show=\"config.closeButton\" ng-click=\"click(toaster, true)\">&times;</button>' +\r\n              '<div ng-class=\"config.title\">{{toaster.title}}</div>' +\r\n              '<div ng-class=\"config.message\" ng-switch on=\"toaster.bodyOutputType\">' +\r\n                '<div ng-switch-when=\"trustedHtml\" ng-bind-html=\"toaster.html\"></div>' +\r\n                '<div ng-switch-when=\"template\"><div ng-include=\"toaster.bodyTemplate\"></div></div>' +\r\n                '<div ng-switch-default >{{toaster.body}}</div>' +\r\n              '</div>' +\r\n            '</div>' +\r\n        '</div>'\r\n    };\r\n}]);\r\n})(window, document);\r\n"],"file":"toaster.js"}