{"version":3,"names":[],"mappings":"","sources":["services/toaster.js"],"sourcesContent":["(function () {\n'use strict';\n\n/*\n * AngularJS Toaster\n * Version: 0.4.9\n *\n * Copyright 2013 Jiri Kavulak.\n * All Rights Reserved.\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\n *\n * Author: Jiri Kavulak\n * Related to project of John Papa and Hans FjÃ¤llemark\n */\n\nangular.module('toaster', ['ngAnimate'])\n.service('toaster', ['$rootScope', function ($rootScope) {\n    this.pop = function (type, title, body, timeout, bodyOutputType, clickHandler) {\n        if (angular.isObject(type)) {\n            var params = type; // NOTE: anable parameters as pop argument\n            this.toast = {\n                type: params.type,\n                title: params.title,\n                body: params.body,\n                timeout: params.timeout,\n                bodyOutputType: params.bodyOutputType,\n                clickHandler: params.clickHandler\n            };\n        }\n        else {\n            this.toast = {\n                type: type,\n                title: title,\n                body: body,\n                timeout: timeout,\n                bodyOutputType: bodyOutputType,\n                clickHandler: clickHandler\n            };\n        }\n        $rootScope.$emit('toaster-newToast');\n    };\n\n    this.clear = function () {\n        $rootScope.$emit('toaster-clearToasts');\n    };\n}])\n.constant('toasterConfig', {\n    'limit': 0,                   // limits max number of toasts\n    'tap-to-dismiss': true,\n    'close-button': false,\n    'newest-on-top': true,\n    //'fade-in': 1000,            // done in css\n    //'on-fade-in': undefined,    // not implemented\n    //'fade-out': 1000,           // done in css\n    // 'on-fade-out': undefined,  // not implemented\n    //'extended-time-out': 1000,    // not implemented\n    'time-out': 3000, // Set timeOut and extendedTimeout to 0 to make it sticky\n    'icon-classes': {\n        error: 'toast-error',\n        info: 'toast-info',\n        wait: 'toast-wait',\n        success: 'toast-success',\n        warning: 'toast-warning'\n    },\n    'body-output-type': '', // Options: '', 'trustedHtml', 'template'\n    'body-template': 'toasterBodyTmpl.html',\n    'icon-class': 'toast-info',\n    'position-class': 'toast-bottom-center',\n    'title-class': 'toast-title',\n    'message-class': 'toast-message'\n})\n.directive('toasterContainer', ['$compile', '$rootScope', '$interval', '$sce', 'toasterConfig', 'toaster',\nfunction ($compile, $rootScope, $interval, $sce, toasterConfig, toaster) {\n    return {\n        replace: true,\n        restrict: 'EA',\n        scope: true, // creates an internal scope for this directive\n        link: function (scope, elm, attrs) {\n\n            var id = 0,\n                mergedConfig;\n\n            mergedConfig = angular.extend({}, toasterConfig, scope.$eval(attrs.toasterOptions));\n\n            scope.config = {\n                position: mergedConfig['position-class'],\n                title: mergedConfig['title-class'],\n                message: mergedConfig['message-class'],\n                tap: mergedConfig['tap-to-dismiss'],\n                closeButton: mergedConfig['close-button'],\n                animation: mergedConfig['animation-class']\n            };\n\n            scope.configureTimer = function configureTimer(toast) {\n                var timeout = typeof (toast.timeout) == \"number\" ? toast.timeout : mergedConfig['time-out'];\n                if (timeout > 0)\n                    setTimeout(toast, timeout);\n            };\n\n            function addToast(toast) {\n                toast.type = mergedConfig['icon-classes'][toast.type];\n                if (!toast.type)\n                    toast.type = mergedConfig['icon-class'];\n\n                id++;\n                angular.extend(toast, { id: id });\n\n                // Set the toast.bodyOutputType to the default if it isn't set\n                toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type'];\n                switch (toast.bodyOutputType) {\n                    case 'trustedHtml':\n                        toast.html = $sce.trustAsHtml(toast.body);\n                        break;\n                    case 'template':\n                        toast.bodyTemplate = toast.body || mergedConfig['body-template'];\n                        break;\n                }\n\n                scope.configureTimer(toast);\n\n                if (mergedConfig['newest-on-top'] === true) {\n                    scope.toasters.unshift(toast);\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\n                        scope.toasters.pop();\n                    }\n                } else {\n                    scope.toasters.push(toast);\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\n                        scope.toasters.shift();\n                    }\n                }\n            }\n\n            function setTimeout(toast, time) {\n                toast.timeout = $interval(function () {\n                    scope.removeToast(toast.id);\n                }, time);\n            }\n\n            scope.toasters = [];\n            $rootScope.$on('toaster-newToast', function () {\n                addToast(toaster.toast);\n            });\n\n            $rootScope.$on('toaster-clearToasts', function () {\n                scope.toasters.splice(0, scope.toasters.length);\n            });\n        },\n        controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n\n            $scope.stopTimer = function (toast) {\n                if (toast.timeout) {\n                    $interval.cancel(toast.timeout);\n                    toast.timeout = null;\n                }\n            };\n\n            $scope.restartTimer = function (toast) {\n                if (!toast.timeout)\n                    $scope.configureTimer(toast);\n            };\n\n            $scope.removeToast = function (id) {\n                var i = 0;\n                for (i; i < $scope.toasters.length; i++) {\n                    if ($scope.toasters[i].id === id)\n                        break;\n                }\n                $scope.toasters.splice(i, 1);\n            };\n\n            $scope.click = function (toaster, isCloseButton) {\n                if ($scope.config.tap === true) {\n                    var removeToast = true;\n                    if (toaster.clickHandler) {\n                        if (angular.isFunction(toaster.clickHandler)) {\n                            removeToast = toaster.clickHandler(toaster, isCloseButton);\n                        }\n                        else if (angular.isFunction($scope.$parent.$eval(toaster.clickHandler))) {\n                            removeToast = $scope.$parent.$eval(toaster.clickHandler)(toaster, isCloseButton);\n                        }\n                        else {\n                            console.log(\"TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.\");\n                        }\n                    }\n                    if (removeToast) {\n                        $scope.removeToast(toaster.id);\n                    }\n                }\n            };\n        }],\n        template:\n        '<div  id=\"toast-container\" ng-class=\"[config.position, config.animation]\">' +\n            '<div ng-repeat=\"toaster in toasters\" class=\"toast\" ng-class=\"toaster.type\" ng-click=\"click(toaster)\" ng-mouseover=\"stopTimer(toaster)\"  ng-mouseout=\"restartTimer(toaster)\">' +\n              '<button class=\"toast-close-button\" ng-show=\"config.closeButton\" ng-click=\"click(toaster, true)\">&times;</button>' +\n              '<div ng-class=\"config.title\">{{toaster.title}}</div>' +\n              '<div ng-class=\"config.message\" ng-switch on=\"toaster.bodyOutputType\">' +\n                '<div ng-switch-when=\"trustedHtml\" ng-bind-html=\"toaster.html\"></div>' +\n                '<div ng-switch-when=\"template\"><div ng-include=\"toaster.bodyTemplate\"></div></div>' +\n                '<div ng-switch-default >{{toaster.body}}</div>' +\n              '</div>' +\n            '</div>' +\n        '</div>'\n    };\n}]);\n})(window, document);\n"],"file":"toaster.js"}