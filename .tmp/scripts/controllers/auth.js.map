{"version":3,"names":[],"mappings":"","sources":["controllers/auth.js"],"sourcesContent":["app.controller('AuthController', function($scope, $location, toaster, Auth) {\n\n  if(Auth.signedIn()) {\n    $location.path('/');\n  }\n\n\t$scope.register = function(user) {\n    Auth.register(user)\n      .then(function() {\n        toaster.pop('success', \"Registered successfully\");\n        $location.path('/');\n      }, function(err) {\n        errMessage(err);\n      });\n  };\n\n\t$scope.login = function(user) {\n     Auth.login(user)\n      .then(function() {\n             console.log(data)\n        toaster.pop('success', \"Logged in successfully\");\n        $location.path('/');\n      }, function(err) {\n        errMessage(err);\n      });\n\t};\n\n\t$scope.changePassword = function(user) {\n     Auth.changePassword(user)\n      .then(function() {\n\n        // Reset form\n        $scope.email = '';\n        $scope.oldPass = '';\n        $scope.newPass = '';\n\n        toaster.pop('success', \"Password changed successfully\");\n      }, function(err) {\n        errMessage(err);\n      });\n  };\n\n    $scope.fbSignup = function(){\n        Auth.fbAuth(function() {\n            toaster.pop('success', 'Logged in successfully');\n            $location.path('/');\n        }, function(err) {\n            errMessage(err);\n        })\n        console.log('kaka')\n    }\n\tfunction errMessage(err) {\n\n    var msg = \"Unknown Error...\";\n\n    if(err && err.code) {\n      switch (err.code) {\n        case \"EMAIL_TAKEN\":\n          msg = \"This email has been taken\"; break;\n        case \"INVALID_EMAIL\":\n          msg = \"Invalid email\"; break;\n        case \"NETWORK_ERROR\":\n          msg = \"Network error\"; break;\n        case \"INVALID_PASSWORD\":\n          msg = \"Invalid password\"; break;\n        case \"INVALID_USER\":\n          msg = \"Invalid user\"; break;\n      }\n    }\n\n    toaster.pop('error', msg);\n  };\n      function thirdPartyLogin(provider) {\n        var deferred = $.Deferred();\n        rootRef.authWithOAuthPopup(provider, function (err, user) {\n            if (err) {\n                deferred.reject(err);\n            }\n            if (user) {\n                deferred.resolve(user);\n            }\n        });\n        return deferred.promise();\n    };\n\n});\n"],"file":"auth.js"}