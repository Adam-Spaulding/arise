{"version":3,"names":[],"mappings":"","sources":["controllers/browse.js"],"sourcesContent":["'use strict';\n\napp.controller('BrowseController', function($scope, $routeParams, toaster, Task, Auth, Comment, Offer, NgMap) {\n\t//uiGmapLogger.currentLevel = uiGmapLogger.LEVELS.debug;\n\t$scope.searchTask = '';\n\t$scope.mapPins = [];\n\t$scope.paths = [];\n\t$scope.tasks = [];\n\t$scope.polylines = [];\n\tif(sessionStorage.latLong){\n\t\tvar sessionedLatLong = JSON.parse(sessionStorage.getItem('latLong'));\n\t}\n\t// Set up map defaults etc.\n\t$scope.googleMapInstance = {};\n\tvar lats = [];\n\tvar lngs = [];\n\tvar mapx;\n\tvar file;\n\t$scope.currentUserArr = [];\n\tif(sessionStorage.latLong){\n\t\tvar sessionedLatLong = JSON.parse(sessionStorage.latLong)\n\t}\n\tvar clusterTypes = ['standard','ugly','beer'];\n\tvar selectedClusterTypes = {\n\t\tstandard:{\n\t\t\ttitle: 'Click to Zoom', gridSize: 60, ignoreHidden: true, minimumClusterSize: 2\n\t\t}\n\t};\n\t$scope.clusterProps = {\n\t\tdoClusterRandomMarkers: true,\n\t\tcurrentClusterType: 'standard',\n\t\tclusterTypes: clusterTypes,/*\n\t\tselectClusterType: selectClusterType,\n\t\tselectedClusterTypes: selectedClusterTypes,*/\n\t\tclusterOptions: selectedClusterTypes.standard\n\t}\n\t$scope.mapProperties = {\n\t\tvisible:true,\n\t\tstroke:{\n\t\t\tcolor: '#FF0066',\n\t\t\tweight: 3\n\t\t},\n\t\tgeodesic:false,\n\t\tstatic:true,\n\t\tfit:false,\n\t\teditable:true,\n\t\tdraggable:false\n\t};\n\t$scope.polylines.push($scope.mapProperties);\n\t/*fb storage*/\n\t//var storage = firebase.storage();\n\n\t$scope.userProfile = {};\n\t$scope.currentUserLocation = {};\n\t$scope.userId = $routeParams.userId;\n\t$scope.show = false;\n\t/*to get the current user lcoation*/\n\tvar latitudeLongObj = [];\n\n\tvar options = {\n\t\tenableHighAccuracy: true,\n\t\t//timeout: 1000,\n\t\tmaximumAge: 0\n\t};\n\n\tfunction error(err) {\n\t\tconsole.warn('ERROR(' + err.code + '): ' + err.message);\n\t};\n\n\tnavigator.geolocation.getCurrentPosition(function (pos) {\n\t\tvar crd = pos.coords;\n\t\tlatitudeLongObj.push(crd.latitude+'');\n\t\tlatitudeLongObj.push(crd.longitude+'');\n\t\t$scope.currentUserLocation['latlong'] = latitudeLongObj;\n\t\t$scope.currentUserLocation['idKey'] = $scope.mapPins.length;\n\t\t$scope.currentUserLocation['title'] = 'i\\'m here';\n\t\t$scope.currentUserLocation['help_type'] = 'Me';\n\t\t$scope.currentUserArr.push($scope.currentUserLocation);\n\t\tsessionStorage.latLong = JSON.stringify(latitudeLongObj)\n\t\tconsole.log('Your current position is:');\n\t\tconsole.log('Latitude : ' + crd.latitude);\n\t\tconsole.log('Longitude: ' + crd.longitude);\n\t\tconsole.log('More or less ' + crd.accuracy + ' meters.');\n\t}, error, options);\n/**/\n\tTask.all.$loaded(function (tasks) {\n\t\tvar taskOpen = [];\n\t\t$scope.tasks = tasks;\n\t\ttasks.map(function (d, i) {\n\t\t\tif(d.status == 'open'){\n\t\t\t\t$scope.mapPins.push(d)\n\t\t\t}\n\t\t})\n\t\t//$scope.tasks = tasks;\n\t\t/*$scope.dynMarkers = [];\n\n\t\tNgMap.getMap().then(function(map) {\n\t\t\tfor (var i = 0; i < $scope.tasks.length; i++) {\n\t\t\t\tvar latLng = new google.maps.LatLng($scope.tasks[i].pos);\n\t\t\t\t$scope.dynMarkers.push(new google.maps.Marker({position: latLng}));\n\t\t\t}\n\t\t\t$scope.markerClusterer = new MarkerClusterer(map, $scope.dynMarkers, {});\n\t\t})*/\n\t})\n\t/* async.waterfall([\n>>>>>>> Stashed changes\n     function(callback){\n\t\t Task.all.$loaded(function (tasks) {\n\t\t\t var taskOpen = [];\n\t\t\t\t $scope.tasks = tasks;\n\t\t\t var taskData = angular.copy(tasks);\n\t\t\t taskData.map(function (d, i) {\n\t\t\t\t if(d.status == 'open'){\n\t\t\t\t\t taskOpen.push(d)\n\t\t\t\t }\n\t\t\t })\n\t\t\t taskOpen.map(function(d,i){\n\t\t\t\t d.latlong = {};\n\t\t\t\t if(d.lat){\n\t\t\t\t\t d.latlong['latitude'] = d.lat;\n\t\t\t\t\t d.latlong['longitude'] = d.long;\n\t\t\t\t\t d.idKey = i;\n\t\t\t\t\t $scope.paths.push(d.latlong);\n\t\t\t\t }\n\t\t\t\t if(d.status != 'open'){\n\t\t\t\t\t taskData.splice(i,1)\n\t\t\t\t }\n\t\t\t });\n\t\t\t $scope.mapPins = taskOpen;\n\t\t\t $scope.polylines[0]['path'] = ($scope.paths);\n\t\t\t //console.log($scope.polylines);\n\t\t\t callback(null,'success')\n\t\t }, function (err) {\n\t\t\t callback('err',null)\n\t\t });\n     }\n ], function (err,result) {\n     console.log($scope.currentUserArr)\n });*/\n\n\t$scope.user = Auth.user;\n\t$scope.signedIn = Auth.signedIn;\n\n\t$scope.listMode = true;\n\n\tif($routeParams.taskId) {\n\t\tvar task = Task.getTask($routeParams.taskId).$asObject();\n\t\t$scope.listMode = false;\n\t\tsetSelectedTask(task);\n\t}\n\tif($routeParams.userId) {\n\t\t//console.log($routeParams.userId);\n\t\t Auth.getProfile($routeParams.userId).$loaded().then(function(x){\n\t\t\t $scope.userProfile = (x)\n\t\t})\n\n\t}\n/*for mapping*/\n\tNgMap.getMap().then(function(map) {\n\t\t$scope.map = map;\n\t});\n\t$scope.handleMapPins = function (event, city) {\n\t\tconsole.log(city)\n\t\t$scope.selectedCity = city;\n\t\t$scope.map.showInfoWindow('myInfoWindow', this);\n\t};\n\n\t/**/\n\n\tfunction setSelectedTask(task) {\n\t\t$scope.selectedTask = task;\n\n\t\t// We check isTaskCreator only if user signedIn\n\t\t// so we don't have to check every time normal guests open the task\n\t\tif($scope.signedIn()) {\n\n\t\t\t// Check if the current login user has already made an offer for selected task\n\t\t\tOffer.isOfferred(task.$id).then(function(data) {\n\t\t\t\t$scope.alreadyOffered = data;\n\t\t\t});\n\n\t\t\t// Check if the current login user is the creator of selected task\n\t\t\t$scope.isTaskCreator = Task.isCreator;\n\n\t\t\t// Check if the selectedTask is open\n\t\t\t$scope.isOpen = Task.isOpen;\n\n\t\t\t// Unblock the Offer button on Offer modal\n\t\t\t// $scope.offer = {close: ''};\n\t\t\t$scope.block = false;\n\n\t\t\t// Check if the current login user is offer maker (to display Cancel Offer button)\n\t\t\t$scope.isOfferMaker = Offer.isMaker;\n\n\t\t\t// --------------------------------------------//\n\n\t\t\t// Check if the current user is assigned fot the selected task\n\t\t\t$scope.isAssignee = Task.isAssignee;\n\n\t\t\t// Check if the selectedTask is completed\n\t\t\t$scope.isCompleted = Task.isCompleted;\n\n\t\t\t// Reload current page\n\t\t\t// $window.location.reload();\n\n\t\t}\n\n\t\t// Get list of comments for the selected task\n\t\t$scope.comments = Comment.comments(task.$id);\n\n\t\t// Get list of offers for the selected task\n\t\t$scope.offers = Offer.offers(task.$id);\n\t};\n\n\t/*img to base64*/\n\tvar handleFileSelect = function(element, cb) {\n\t\tvar files = element.files;\n\t\tvar file = files[0];\n\t\tif (files && file) {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.addEventListener('load', function () {\n\t\t\t\tvar image = new Image();\n\t\t\t\timage.height = 100;\n\t\t\t\timage.title = file.name;\n\t\t\t\timage.src = this.result;\n\t\t\t\tcb(this.result);\n\t\t\t}, false);\n\n\t\t\treader.readAsDataURL(file);\n\t\t}\n\t};\n\t// --------------- TASK ---------------\n\n\t$scope.cancelTask = function(taskId) {\n\t\tTask.cancelTask(taskId).then(function() {\n\t\t\ttoaster.pop('success', 'This call for help has been cancelled successfully.');\n\t\t\t$location.path('/browse');\n\t\t});\n\t};\n\n\t// --------------------------------------------//\n\n\t$scope.completeTask = function(taskId) {\n\t\tTask.completeTask(taskId).then(function() {\n\t\t\ttoaster.pop('success', 'Congratulation! You have completed this call for help.');\n\t\t});\n\t};\n\n\t// --------------- COMMENT ---------------\n\n\t$scope.addComment = function() {\n\t\tvar comment = {\n\t\t\tcontent: $scope.content,\n\t\t\tname: $scope.user.profile.name,\n\t\t\tgravatar: $scope.user.profile.gravatar\n\t\t};\n\t\tvar convoImgElement = document.getElementById('convoImg');\n\t\tif(convoImgElement.files.length>0){\n\t\t\tvar storageRef = firebase.storage().ref().child($scope.user.uid);\n\t\t\t// Get a reference to store file at photos/<FILENAME>.jpg\n\t\t\tvar photoRef = storageRef.child(file.name);\n\t\t\t// Upload file to Firebase Storage\n\t\t\tvar uploadTask = photoRef.put(file);\n\t\t\tuploadTask.on('state_changed', null, null, function(snapshot) {\n\t\t\t\tconsole.log('success')\n\t\t\t\tconsole.log(snapshot)\n\t\t\t\t// When the image has successfully uploaded, we get its download URL\n\t\t\t\tvar downloadUrl = uploadTask.snapshot.downloadURL;\n\t\t\t\tcomment.img = downloadUrl;\n\t\t\t\tComment.addComment($scope.selectedTask.$id, comment).then(function() {\n\t\t\t\t\t$scope.content = '';\n\t\t\t\t\tdocument.getElementById('commentPrwImg').src = '';\n\t\t\t\t})\n\t\t\t});\n\t\t}else{\n\t\t\tComment.addComment($scope.selectedTask.$id, comment).then(function() {\n\t\t\t\t$scope.content = '';\n\t\t\t})\n\t\t}\n\t\t/*var comment = {\n\t\t\tcontent: $scope.content,\n\t\t\tname: $scope.user.profile.name,\n\t\t\tgravatar: $scope.user.profile.gravatar\n\t\t};\n\t\tComment.addComment($scope.selectedTask.$id, comment).then(function() {\n\t\t\t$scope.content = '';\n\t\t});*/\n\t};\n\n\t// --------------- OFFER ---------------\n\n\t$scope.previewImage = function (that, type) {\n\t\tvar imgId = '';\n\t\tvar prwImgId = '';\n\t\tif (type == 'offer') {\n\t\t\timgId = 'imgupload';\n\t\t\tprwImgId = 'offerimg';\n\t\t} else if (type == 'post') {\n\t\t\timgId = 'helpImg';\n\t\t\tprwImgId = 'postimg';\n\t\t} else if (type == 'comment') {\n\t\t\timgId = 'convoImg';\n\t\t\tprwImgId = 'commentPrwImg';\n\t\t}\n\t\tconsole.log('change occured');\n\t\tvar imgechge = document.getElementById(imgId);\n\t\tfile = imgechge.files[0];\n\t\thandleFileSelect(imgechge, function (data) {\n\t\t\tdocument.getElementById(prwImgId).src = data;\n\t\t})\n\t};\n\n\t$scope.makeOffer = function(element) {\n\t\tvar offer = {\n\t\t\ttotal: $scope.total,\n\t\t\tuid: $scope.user.uid,\n\t\t\tname: $scope.user.profile.name,\n\t\t\tgravatar: $scope.user.profile.gravatar\n\t\t};\n\t\tvar imgelement = document.getElementById('imgupload');\n\t\tif(imgelement.files.length>0){\n\t\t\tvar storageRef = firebase.storage().ref().child($scope.user.uid);\n\t\t\t// Get a reference to store file at photos/<FILENAME>.jpg\n\t\t\tvar photoRef = storageRef.child(file.name);\n\t\t\t// Upload file to Firebase Storage\n\t\t\tvar uploadTask = photoRef.put(file);\n\t\t\tuploadTask.on('state_changed', null, null, function(snapshot) {\n\t\t\t\tconsole.log('success')\n\t\t\t\tconsole.log(snapshot)\n\t\t\t\t// When the image has successfully uploaded, we get its download URL\n\t\t\t\tvar downloadUrl = uploadTask.snapshot.downloadURL;\n\t\t\t\toffer.img = downloadUrl;\n\t\t\t\tOffer.makeOffer($scope.selectedTask.$id, offer).then(function() {\n\t\t\t\t\ttoaster.pop('success', 'Your offer has been placed.');\n\t\t\t\t\tdocument.getElementById('offerimg').src = '';\n\n\t\t\t\t\t// Mark that the current user has offerred for this task.\n\t\t\t\t\t$scope.alreadyOffered = true;\n\n\t\t\t\t\t// Reset offer form\n\t\t\t\t\t$scope.total = true;\n\n\t\t\t\t\t// Disable the \"Offer Now\" button on the modal\n\t\t\t\t\t$scope.block = true;\n\t\t\t\t\t$('#offModal').modal('hide');\n\t\t\t\t});\n\t\t\t});\n\t\t\t/*\n\t\t\thandleFileSelect(imgelement, function (data) {\n\t\t\t\tdocument.getElementById('offerimg').src = data;\n\t\t\t\toffer.img = data;\n\t\t\t\tOffer.makeOffer($scope.selectedTask.$id, offer).then(function() {\n\t\t\t\t\ttoaster.pop('success', 'Your offer has been placed.');\n\n\t\t\t\t\t// Mark that the current user has offerred for this task.\n\t\t\t\t\t$scope.alreadyOffered = true;\n\n\t\t\t\t\t// Reset offer form\n\t\t\t\t\t$scope.total = true;\n\n\t\t\t\t\t// Disable the \"Offer Now\" button on the modal\n\t\t\t\t\t$scope.block = true;\n\t\t\t\t\t$('#offModal').modal('hide');\n\t\t\t\t});\n\t\t\t})*/\n\t\t}else{\n\t\t\tOffer.makeOffer($scope.selectedTask.$id, offer).then(function() {\n\t\t\t\ttoaster.pop('success', 'Your offer has been placed.');\n\n\t\t\t\t// Mark that the current user has offerred for this task.\n\t\t\t\t$scope.alreadyOffered = true;\n\n\t\t\t\t// Reset offer form\n\t\t\t\t$scope.total = true;\n\n\t\t\t\t// Disable the \"Offer Now\" button on the modal\n\t\t\t\t$scope.block = true;\n\t\t\t\t$('#offModal').modal('hide');\n\t\t\t});\n\t\t}\n\n\n\n\t};\n\n\t$scope.cancelOffer = function(offerId) {\n\t\tOffer.cancelOffer($scope.selectedTask.$id, offerId).then(function() {\n\t\t\ttoaster.pop('success', 'Your offer has been cancelled.');\n\n\t\t\t// Mark that the current user has cancelled offer for this task.\n\t\t\t$scope.alreadyOffered = false;\n\n\t\t\t// Unblock the Offer button on Offer modal\n\t\t\t$scope.block = false;\n\t\t});\n\t};\n\n\t// --------------------------------------------//\n\n\t$scope.acceptOffer = function(offerId, runnerId) {\n\t\tOffer.acceptOffer($scope.selectedTask.$id, offerId, runnerId).then(function() {\n\t\t\ttoaster.pop('success', 'Call has been accepted!');\n\n\t\t\t// Mark that this Task has been assigned\n\t\t\t// $scope.isAssigned = true;\n\n\t\t\t// Notify assignee\n\t\t\tOffer.notifyRunner($scope.selectedTask.$id, runnerId);\n\t\t});\n\t};\n\n})"],"file":"controllers/browse.js","sourceRoot":"/source/"}